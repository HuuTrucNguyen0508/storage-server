"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/folders";
exports.ids = ["pages/api/folders"];
exports.modules = {

/***/ "lowdb":
/*!************************!*\
  !*** external "lowdb" ***!
  \************************/
/***/ ((module) => {

module.exports = require("lowdb");

/***/ }),

/***/ "lowdb/adapters/FileSync":
/*!******************************************!*\
  !*** external "lowdb/adapters/FileSync" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("lowdb/adapters/FileSync");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffolders&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cfolders%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffolders&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cfolders%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_folders_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\folders\\index.js */ \"(api)/./pages/api/folders/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_folders_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_folders_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/folders\",\n        pathname: \"/api/folders\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_folders_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjMyX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1yb3V0ZS1sb2FkZXIvaW5kZXguanM/a2luZD1QQUdFU19BUEkmcGFnZT0lMkZhcGklMkZmb2xkZXJzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNmb2xkZXJzJTVDaW5kZXguanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxlLXN0b3JhZ2UtYmFja2VuZC8/NGU5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGZvbGRlcnNcXFxcaW5kZXguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mb2xkZXJzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZm9sZGVyc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffolders&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cfolders%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/database.js":
/*!*************************!*\
  !*** ./lib/database.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst low = __webpack_require__(/*! lowdb */ \"lowdb\");\nconst FileSync = __webpack_require__(/*! lowdb/adapters/FileSync */ \"lowdb/adapters/FileSync\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass DatabaseService {\n    constructor(){\n        // Use the mounted volume path for database\n        this.dbPath = path.join(\"/app/database/files.json\");\n        this.uploadsDir = path.join(\"/app/uploads\");\n        // Ensure directories exist\n        this.ensureDirectories();\n        // Initialize database\n        this.init();\n    }\n    // Singleton pattern to prevent multiple instances\n    static getInstance() {\n        if (!DatabaseService.instance) {\n            DatabaseService.instance = new DatabaseService();\n        }\n        return DatabaseService.instance;\n    }\n    ensureDirectories() {\n        const dbDir = path.dirname(this.dbPath);\n        if (!fs.existsSync(dbDir)) {\n            fs.mkdirSync(dbDir, {\n                recursive: true\n            });\n        }\n        if (!fs.existsSync(this.uploadsDir)) {\n            fs.mkdirSync(this.uploadsDir, {\n                recursive: true\n            });\n        }\n    }\n    init() {\n        try {\n            // Only initialize if not already initialized\n            if (this.db) {\n                return;\n            }\n            // Create adapter and database\n            const adapter = new FileSync(this.dbPath);\n            this.db = low(adapter);\n            // Check if the database has the correct structure\n            if (!this.db.has(\"files\").value() || !this.db.has(\"folders\").value()) {\n                // Check if the file contains an array (old format)\n                const rawData = this.db.value();\n                if (Array.isArray(rawData)) {\n                    // Convert old array format to new object format with folders\n                    this.db.setState({\n                        files: rawData.map((file)=>({\n                                ...file,\n                                path: file.path || \"/\",\n                                parentPath: file.parentPath || \"/\"\n                            })),\n                        folders: []\n                    }).write();\n                } else {\n                    // Initialize with empty structure\n                    this.db.defaults({\n                        files: [],\n                        folders: []\n                    }).write();\n                }\n            }\n        } catch (error) {\n            console.error(\"Error initializing database:\", error);\n            throw error;\n        }\n    }\n    // Save file information to database\n    saveFile(fileInfo) {\n        try {\n            const fileData = {\n                id: Date.now() + Math.random(),\n                filename: fileInfo.filename,\n                originalName: fileInfo.originalName,\n                name: fileInfo.originalName,\n                size: fileInfo.size,\n                mimeType: fileInfo.mimeType,\n                filePath: fileInfo.filePath,\n                path: fileInfo.path || \"/\",\n                parentPath: fileInfo.parentPath || \"/\",\n                uploadedAt: fileInfo.uploadedAt,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n            this.db.get(\"files\").push(fileData).write();\n            return true;\n        } catch (error) {\n            console.error(\"Error saving file to database:\", error);\n            return false;\n        }\n    }\n    // Get all files\n    getAllFiles() {\n        try {\n            const files = this.db.get(\"files\").sortBy(\"uploadedAt\").reverse().value();\n            return files;\n        } catch (error) {\n            console.error(\"Error retrieving files from database:\", error);\n            return [];\n        }\n    }\n    // Get a specific file by filename\n    getFile(filename) {\n        try {\n            const file = this.db.get(\"files\").find({\n                filename\n            }).value();\n            return file;\n        } catch (error) {\n            console.error(\"Error retrieving file from database:\", error);\n            return null;\n        }\n    }\n    // Delete a file from database\n    deleteFile(filename) {\n        try {\n            const result = this.db.get(\"files\").remove({\n                filename\n            }).write();\n            return result.length > 0;\n        } catch (error) {\n            console.error(\"Error deleting file from database:\", error);\n            return false;\n        }\n    }\n    // Get file statistics\n    getStats() {\n        try {\n            const files = this.db.get(\"files\").value();\n            const totalFiles = files.length;\n            const totalSize = files.reduce((sum, file)=>sum + file.size, 0);\n            // Group by mime type\n            const mimeTypes = {};\n            files.forEach((file)=>{\n                const mimeType = file.mimeType || \"unknown\";\n                mimeTypes[mimeType] = (mimeTypes[mimeType] || 0) + 1;\n            });\n            const mimeTypesArray = Object.entries(mimeTypes).map(([mimeType, count])=>({\n                    mimeType,\n                    count\n                })).sort((a, b)=>b.count - a.count);\n            return {\n                totalFiles,\n                totalSize,\n                mimeTypes: mimeTypesArray\n            };\n        } catch (error) {\n            console.error(\"Error getting database stats:\", error);\n            return {\n                totalFiles: 0,\n                totalSize: 0,\n                mimeTypes: []\n            };\n        }\n    }\n    // Search files by name or type\n    searchFiles(query) {\n        try {\n            const files = this.db.get(\"files\").value();\n            const searchTerm = query.toLowerCase();\n            const results = files.filter((file)=>file.originalName.toLowerCase().includes(searchTerm) || file.filename.toLowerCase().includes(searchTerm) || file.mimeType.toLowerCase().includes(searchTerm));\n            console.log(`✅ Found ${results.length} files matching \"${query}\"`);\n            return results;\n        } catch (error) {\n            console.error(\"❌ Error searching files:\", error);\n            return [];\n        }\n    }\n    // Get files by mime type\n    getFilesByType(mimeType) {\n        try {\n            const files = this.db.get(\"files\").filter({\n                mimeType\n            }).sortBy(\"uploadedAt\").reverse().value();\n            console.log(`✅ Retrieved ${files.length} files of type ${mimeType}`);\n            return files;\n        } catch (error) {\n            console.error(\"❌ Error retrieving files by type:\", error);\n            return [];\n        }\n    }\n    // ===== FOLDER MANAGEMENT METHODS =====\n    // Create a new folder\n    createFolder(folderInfo) {\n        try {\n            const folderData = {\n                id: Date.now() + Math.random(),\n                name: folderInfo.name,\n                path: folderInfo.path,\n                parentPath: folderInfo.parentPath || \"/\",\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n            this.db.get(\"folders\").push(folderData).write();\n            return true;\n        } catch (error) {\n            console.error(\"Error creating folder:\", error);\n            return false;\n        }\n    }\n    // Get all folders\n    getAllFolders() {\n        try {\n            const folders = this.db.get(\"folders\").sortBy(\"path\").value();\n            return folders;\n        } catch (error) {\n            console.error(\"Error retrieving folders:\", error);\n            return [];\n        }\n    }\n    // Get folders by parent path\n    getFoldersByParent(parentPath) {\n        try {\n            const folders = this.db.get(\"folders\").filter({\n                parentPath\n            }).sortBy(\"name\").value();\n            return folders;\n        } catch (error) {\n            console.error(\"Error retrieving folders by parent:\", error);\n            return [];\n        }\n    }\n    // Get files by parent path\n    getFilesByParent(parentPath) {\n        try {\n            const files = this.db.get(\"files\").filter({\n                parentPath\n            }).sortBy(\"name\").value();\n            return files;\n        } catch (error) {\n            console.error(\"Error retrieving files by parent:\", error);\n            return [];\n        }\n    }\n    // Get folder by path\n    getFolderByPath(path) {\n        try {\n            const folder = this.db.get(\"folders\").find({\n                path\n            }).value();\n            return folder;\n        } catch (error) {\n            console.error(\"Error retrieving folder by path:\", error);\n            return null;\n        }\n    }\n    // Delete folder\n    deleteFolder(path) {\n        try {\n            // First delete all files in this folder and subfolders\n            const filesToDelete = this.db.get(\"files\").filter((file)=>file.path.startsWith(path + \"/\") || file.parentPath === path).value();\n            filesToDelete.forEach((file)=>{\n                // Delete physical file\n                try {\n                    if (fs.existsSync(file.filePath)) {\n                        fs.unlinkSync(file.filePath);\n                    }\n                } catch (err) {\n                    console.error(\"Error deleting physical file:\", err);\n                }\n            });\n            // Delete files from database\n            this.db.get(\"files\").remove((file)=>file.path.startsWith(path + \"/\") || file.parentPath === path).write();\n            // Delete subfolders\n            this.db.get(\"folders\").remove((folder)=>folder.path.startsWith(path + \"/\") || folder.parentPath === path).write();\n            // Delete the folder itself\n            const result = this.db.get(\"folders\").remove({\n                path\n            }).write();\n            return result.length > 0;\n        } catch (error) {\n            console.error(\"Error deleting folder:\", error);\n            return false;\n        }\n    }\n    // Rename folder\n    renameFolder(oldPath, newPath, newName) {\n        try {\n            // Update folder\n            const folder = this.db.get(\"folders\").find({\n                path: oldPath\n            }).value();\n            if (!folder) return false;\n            folder.name = newName;\n            folder.path = newPath;\n            folder.updatedAt = new Date().toISOString();\n            this.db.get(\"folders\").find({\n                path: oldPath\n            }).assign(folder).write();\n            // Update all files in this folder\n            this.db.get(\"files\").filter((file)=>file.parentPath === oldPath).forEach((file)=>{\n                file.parentPath = newPath;\n                file.path = newPath + \"/\" + file.name;\n                file.updatedAt = new Date().toISOString();\n            }).write();\n            // Update all subfolders\n            this.db.get(\"folders\").filter((folder)=>folder.parentPath === oldPath).forEach((subfolder)=>{\n                subfolder.parentPath = newPath;\n                subfolder.path = newPath + \"/\" + subfolder.name;\n                subfolder.updatedAt = new Date().toISOString();\n            }).write();\n            return true;\n        } catch (error) {\n            console.error(\"Error renaming folder:\", error);\n            return false;\n        }\n    }\n    // Move file to different folder\n    moveFile(filename, newParentPath) {\n        try {\n            const file = this.db.get(\"files\").find({\n                filename\n            }).value();\n            if (!file) return false;\n            const newPath = newParentPath === \"/\" ? `/${file.name}` : `${newParentPath}/${file.name}`;\n            // Update file in database\n            file.parentPath = newParentPath;\n            file.path = newPath;\n            file.updatedAt = new Date().toISOString();\n            this.db.get(\"files\").find({\n                filename\n            }).assign(file).write();\n            // Move physical file\n            const newFilePath = path.join(this.uploadsDir, newParentPath === \"/\" ? \"\" : newParentPath, file.filename);\n            const newDir = path.dirname(newFilePath);\n            if (!fs.existsSync(newDir)) {\n                fs.mkdirSync(newDir, {\n                    recursive: true\n                });\n            }\n            if (fs.existsSync(file.filePath)) {\n                fs.renameSync(file.filePath, newFilePath);\n                file.filePath = newFilePath;\n                this.db.get(\"files\").find({\n                    filename\n                }).assign(file).write();\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error moving file:\", error);\n            return false;\n        }\n    }\n    // Rename file\n    renameFile(filename, newName) {\n        try {\n            const file = this.db.get(\"files\").find({\n                filename\n            }).value();\n            if (!file) return false;\n            const newPath = file.parentPath === \"/\" ? `/${newName}` : `${file.parentPath}/${newName}`;\n            // Update file in database\n            file.name = newName;\n            file.originalName = newName;\n            file.path = newPath;\n            file.updatedAt = new Date().toISOString();\n            this.db.get(\"files\").find({\n                filename\n            }).assign(file).write();\n            return true;\n        } catch (error) {\n            console.error(\"Error renaming file:\", error);\n            return false;\n        }\n    }\n    // Get folder tree structure\n    getFolderTree() {\n        try {\n            const folders = this.getAllFolders();\n            const rootFolders = folders.filter((folder)=>folder.parentPath === \"/\");\n            const buildTree = (parentPath)=>{\n                const children = folders.filter((folder)=>folder.parentPath === parentPath);\n                return children.map((folder)=>({\n                        ...folder,\n                        children: buildTree(folder.path)\n                    }));\n            };\n            return buildTree(\"/\");\n        } catch (error) {\n            console.error(\"Error building folder tree:\", error);\n            return [];\n        }\n    }\n    // Check if folder exists\n    folderExists(path) {\n        try {\n            const folder = this.db.get(\"folders\").find({\n                path\n            }).value();\n            return !!folder;\n        } catch (error) {\n            console.error(\"Error checking folder existence:\", error);\n            return false;\n        }\n    }\n    // Check if file exists in folder\n    fileExistsInFolder(parentPath, name) {\n        try {\n            const file = this.db.get(\"files\").find({\n                parentPath,\n                name\n            }).value();\n            return !!file;\n        } catch (error) {\n            console.error(\"Error checking file existence:\", error);\n            return false;\n        }\n    }\n    // Close database connection (lowdb doesn't need explicit closing)\n    close() {\n        console.log(\"✅ Database connection closed\");\n    }\n}\nmodule.exports = DatabaseService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/database.js\n");

/***/ }),

/***/ "(api)/./pages/api/folders/index.js":
/*!************************************!*\
  !*** ./pages/api/folders/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst DatabaseService = __webpack_require__(/*! ../../../lib/database.js */ \"(api)/./lib/database.js\");\n// Initialize database\nconst db = DatabaseService.getInstance();\n// GET /api/folders - List all folders\n// POST /api/folders - Create a new folder\nfunction handler(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            const folders = db.getAllFolders();\n            res.status(200).json(folders);\n        } catch (err) {\n            console.error(\"Error fetching folders:\", err);\n            res.status(500).json({\n                error: \"Failed to fetch folders\"\n            });\n        }\n    } else if (req.method === \"POST\") {\n        try {\n            const { name, parentPath = \"/\" } = req.body;\n            if (!name || name.trim() === \"\") {\n                return res.status(400).json({\n                    error: \"Folder name is required\"\n                });\n            }\n            // Validate folder name (no special characters)\n            if (!/^[a-zA-Z0-9\\s\\-_]+$/.test(name)) {\n                return res.status(400).json({\n                    error: \"Folder name contains invalid characters\"\n                });\n            }\n            const folderPath = parentPath === \"/\" ? `/${name}` : `${parentPath}/${name}`;\n            // Check if folder already exists\n            if (db.folderExists(folderPath)) {\n                return res.status(409).json({\n                    error: \"Folder already exists\"\n                });\n            }\n            // Check if parent folder exists (unless it's root)\n            if (parentPath !== \"/\" && !db.folderExists(parentPath)) {\n                return res.status(404).json({\n                    error: \"Parent folder does not exist\"\n                });\n            }\n            const folderInfo = {\n                name: name.trim(),\n                path: folderPath,\n                parentPath\n            };\n            const success = db.createFolder(folderInfo);\n            if (success) {\n                // Create physical directory\n                const fs = __webpack_require__(/*! fs */ \"fs\");\n                const path = __webpack_require__(/*! path */ \"path\");\n                const physicalPath = path.join(db.uploadsDir, parentPath === \"/\" ? \"\" : parentPath, name);\n                if (!fs.existsSync(physicalPath)) {\n                    fs.mkdirSync(physicalPath, {\n                        recursive: true\n                    });\n                }\n                res.status(201).json({\n                    message: \"Folder created successfully\",\n                    folder: folderInfo\n                });\n            } else {\n                res.status(500).json({\n                    error: \"Failed to create folder\"\n                });\n            }\n        } catch (err) {\n            console.error(\"Error creating folder:\", err);\n            res.status(500).json({\n                error: \"Failed to create folder\"\n            });\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"GET\",\n            \"POST\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPO1NBQU87UUFDdEM3QixJQUFJSSxNQUFNLENBQUMsS0FBSzBCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRS9CLElBQUlFLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDeEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbGUtc3RvcmFnZS1iYWNrZW5kLy4vcGFnZXMvYXBpL2ZvbGRlcnMvaW5kZXguanM/MmNkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEYXRhYmFzZVNlcnZpY2UgPSByZXF1aXJlKCcuLi8uLi8uLi9saWIvZGF0YWJhc2UuanMnKTtcclxuXHJcbi8vIEluaXRpYWxpemUgZGF0YWJhc2VcclxuY29uc3QgZGIgPSBEYXRhYmFzZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbi8vIEdFVCAvYXBpL2ZvbGRlcnMgLSBMaXN0IGFsbCBmb2xkZXJzXHJcbi8vIFBPU1QgL2FwaS9mb2xkZXJzIC0gQ3JlYXRlIGEgbmV3IGZvbGRlclxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XHJcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBmb2xkZXJzID0gZGIuZ2V0QWxsRm9sZGVycygpO1xyXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihmb2xkZXJzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBmb2xkZXJzOicsIGVycik7XHJcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggZm9sZGVycycgfSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgbmFtZSwgcGFyZW50UGF0aCA9ICcvJyB9ID0gcmVxLmJvZHk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIW5hbWUgfHwgbmFtZS50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdGb2xkZXIgbmFtZSBpcyByZXF1aXJlZCcgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIGZvbGRlciBuYW1lIChubyBzcGVjaWFsIGNoYXJhY3RlcnMpXHJcbiAgICAgIGlmICghL15bYS16QS1aMC05XFxzXFwtX10rJC8udGVzdChuYW1lKSkge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnRm9sZGVyIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzJyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IHBhcmVudFBhdGggPT09ICcvJyA/IGAvJHtuYW1lfWAgOiBgJHtwYXJlbnRQYXRofS8ke25hbWV9YDtcclxuICAgICAgXHJcbiAgICAgIC8vIENoZWNrIGlmIGZvbGRlciBhbHJlYWR5IGV4aXN0c1xyXG4gICAgICBpZiAoZGIuZm9sZGVyRXhpc3RzKGZvbGRlclBhdGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA5KS5qc29uKHsgZXJyb3I6ICdGb2xkZXIgYWxyZWFkeSBleGlzdHMnIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBwYXJlbnQgZm9sZGVyIGV4aXN0cyAodW5sZXNzIGl0J3Mgcm9vdClcclxuICAgICAgaWYgKHBhcmVudFBhdGggIT09ICcvJyAmJiAhZGIuZm9sZGVyRXhpc3RzKHBhcmVudFBhdGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdQYXJlbnQgZm9sZGVyIGRvZXMgbm90IGV4aXN0JyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZm9sZGVySW5mbyA9IHtcclxuICAgICAgICBuYW1lOiBuYW1lLnRyaW0oKSxcclxuICAgICAgICBwYXRoOiBmb2xkZXJQYXRoLFxyXG4gICAgICAgIHBhcmVudFBhdGhcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkYi5jcmVhdGVGb2xkZXIoZm9sZGVySW5mbyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgIC8vIENyZWF0ZSBwaHlzaWNhbCBkaXJlY3RvcnlcclxuICAgICAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuICAgICAgICBjb25zdCBwaHlzaWNhbFBhdGggPSBwYXRoLmpvaW4oZGIudXBsb2Fkc0RpciwgcGFyZW50UGF0aCA9PT0gJy8nID8gJycgOiBwYXJlbnRQYXRoLCBuYW1lKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMocGh5c2ljYWxQYXRoKSkge1xyXG4gICAgICAgICAgZnMubWtkaXJTeW5jKHBoeXNpY2FsUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICAgICAgICBtZXNzYWdlOiAnRm9sZGVyIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcclxuICAgICAgICAgIGZvbGRlcjogZm9sZGVySW5mb1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIGZvbGRlcicgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBmb2xkZXI6JywgZXJyKTtcclxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBjcmVhdGUgZm9sZGVyJyB9KTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmVzLnNldEhlYWRlcignQWxsb3cnLCBbJ0dFVCcsICdQT1NUJ10pO1xyXG4gICAgcmVzLnN0YXR1cyg0MDUpLmVuZChgTWV0aG9kICR7cmVxLm1ldGhvZH0gTm90IEFsbG93ZWRgKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkRhdGFiYXNlU2VydmljZSIsInJlcXVpcmUiLCJkYiIsImdldEluc3RhbmNlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImZvbGRlcnMiLCJnZXRBbGxGb2xkZXJzIiwic3RhdHVzIiwianNvbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIm5hbWUiLCJwYXJlbnRQYXRoIiwiYm9keSIsInRyaW0iLCJ0ZXN0IiwiZm9sZGVyUGF0aCIsImZvbGRlckV4aXN0cyIsImZvbGRlckluZm8iLCJwYXRoIiwic3VjY2VzcyIsImNyZWF0ZUZvbGRlciIsImZzIiwicGh5c2ljYWxQYXRoIiwiam9pbiIsInVwbG9hZHNEaXIiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwibWVzc2FnZSIsImZvbGRlciIsInNldEhlYWRlciIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/folders/index.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1"], () => (__webpack_exec__("(api)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffolders&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cfolders%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();