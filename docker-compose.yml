services:
  traefik:
    image: traefik:v3.5.2
    container_name: traefik
    ports:
    - "8080:80" # Traefik web entrypoint (container 80 -> host 8080)
    - "8082:8080" # Traefik dashboard (container 8080 -> host 8082)
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--tracing.openTelemetry=true"
      - "--tracing.openTelemetry.address=jaeger:4317"
      - "--tracing.openTelemetry.grpc=true"
      - "--tracing.serviceName=traefik"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
    - file-storage-network
    restart: unless-stopped

  filebrowser:
    image: filebrowser/filebrowser:v2-s6
    container_name: filebrowser
    volumes:
    - F:\\content:/data
    environment:
    - FB_BASEURL=/
    - FB_LOGLEVEL=INFO
    - FB_DATABASE=/tmp/filebrowser.db
    - FB_ROOT=/data
    networks:
    - file-storage-network
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.filebrowser.rule=Host(`filebrowser.localhost`)"
    - "traefik.http.routers.filebrowser.entrypoints=web"
    - "traefik.http.services.filebrowser.loadbalancer.server.port=80"

  filebrowser-exporter:
    image: prom/node-exporter:latest
    container_name: filebrowser-exporter
    ports:
    - "9101:9100"
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    - '--collector.systemd'
    - '--collector.processes'
    networks:
    - file-storage-network
    restart: unless-stopped
    depends_on:
    - filebrowser

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
    - "16686:16686"
    - "14268:14268"
    - "14269:14269"
    - "14250:14250"
    - "6831:6831/udp"
    - "6832:6832/udp"
    - "4317:4317"
    - "4318:4318"
    environment:
    - COLLECTOR_OTLP_ENABLED=true
    - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    - METRICS_BACKEND=prometheus
    - PROMETHEUS_SERVER_URL=http://prometheus:9090
    networks:
    - file-storage-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - "9090:9090"
    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_data:/prometheus
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention.time=200h'
    - '--web.enable-lifecycle'
    networks:
    - file-storage-network
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
    - "3100:3100"
    volumes:
    - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
    - file-storage-network
    restart: unless-stopped


  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
    - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    - /var/log:/var/log:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
    - file-storage-network
    restart: unless-stopped
    depends_on:
    - loki


  windows-exporter:
    image: prom/node-exporter:latest
    container_name: windows-exporter
    ports:
    - "9100:9100"
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    - '--collector.systemd'
    - '--collector.processes'
    networks:
    - file-storage-network
    restart: unless-stopped

  docker-exporter:
    image: prom/node-exporter:latest
    container_name: docker-exporter
    ports:
    - "9323:9100"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
    - file-storage-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
    - "3000:3000"
    volumes:
    - grafana_data:/var/lib/grafana
    - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    - GF_USERS_ALLOW_SIGN_UP=false
    networks:
    - file-storage-network
    restart: unless-stopped
    depends_on:
    - prometheus
    - loki


networks:
  file-storage-network:
    driver: bridge
    external: false


volumes:
  file-storage-data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local